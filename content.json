{"pages":[],"posts":[{"title":"PHP CURL模拟登陆","text":"最近有一个爬虫需求，简单看了一下curl，也踩了一些坑。 附上代码： 模拟登录12345678910111213141516171819202122232425262728293031&lt;?phpfunction curl_login() { $cookie = &apos;cookie.txt&apos;; $ch = curl_init(); //初始化curl模块 $url = &apos;https://www.test/login&apos;; $post = [ &apos;username&apos; =&gt; &apos;***&apos;, &apos;passowrd&apos; =&gt; &apos;***&apos;, &apos;sms_code&apos; =&gt; &apos;***&apos; ]; curl_setopt($ch, CURLOPT_URL, $url); //登录提交的地址 curl_setopt($ch, CURLOPT_HEADER, 0); //是否显示头信息 curl_setopt($ch, CURLOPT_HTTPHEADER, array(&apos;Content-Type: application/json; charset=UTF-8&apos;)); // 设置http头 curl_setopt($ch, CURLOPT_RETURNTRANSFER, 0); //是否自动显示返回的信息 curl_setopt($ch, CURLOPT_COOKIEJAR, $cookie); //设置cookie信息保存在指定的文件夹中 curl_setopt($ch, CURLOPT_POST, 1); //以POST方式提交 curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post)); //要执行的信息 curl_setopt($ch, CURLOPT_USERAGENT, &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // https需要关闭 curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); $output = curl_exec($ch); // 执行CURL print_r($output); if($output === FALSE ) { echo &quot;CURL Error:&quot;.curl_error($ch); curl_close($ch); exit; } curl_close($ch);}curl_login(); 如果出现返回403：可能是忘了：curl_setopt($ch, CURLOPT_USERAGENT, ‘Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36’)。 获取登录后的页面内容123456789101112131415161718192021222324252627&lt;?phpfunction curl_get($url) { $cookie = &apos;cookie.txt&apos;; // cookie存放的地址 // 1. 初始curl $ch = curl_init(); // 2. 设置选项，包括URL curl_setopt($ch,CURLOPT_URL, $url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); curl_setopt($ch,CURLOPT_HEADER,0); curl_setopt($ch, CURLOPT_HEADER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); curl_setopt($ch, CURLOPT_USERAGENT, &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;); curl_setopt($ch, CURLOPT_COOKIEFILE, $cookie); // 3. 执行并获取HTML文档内容 $output = curl_exec($ch); if($output === FALSE ) { echo &quot;CURL Error:&quot;.curl_error($ch); curl_close($ch); exit; } // 4. 释放curl句柄 curl_close($ch); // 5. 返回页面内容 return $output; }curl_get($url); 上述方法无效的试试上面的方法试用于cookie作为登录凭证，如果网站采用了token或者jwt记录用户状态，或者需要复杂验证码的时候可以试试下面的方法。 打开chorme，打开需要模拟登录的网站并登录，登录后F12调出控制台 查看network下的headers下的request headers下的cookie，复制它。接下来会使用它。 贴上代码： 1234567891011121314151617181920212223242526&lt;?phpfunction curl_get($url) { // 1. 初始curl $ch = curl_init(); // 2. 设置选项，包括URL curl_setopt($ch,CURLOPT_URL, $url); curl_setopt($ch,CURLOPT_RETURNTRANSFER,1); curl_setopt($ch,CURLOPT_HEADER,0); curl_setopt($ch, CURLOPT_HEADER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); curl_setopt($ch, CURLOPT_USERAGENT, &apos;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;); curl_setopt($ch, CURLOPT_COOKIE, &apos;此处为刚才复制的cookie&apos;); // 3. 执行并获取HTML文档内容 $output = curl_exec($ch); if($output === FALSE ) { echo &quot;CURL Error:&quot;.curl_error($ch); curl_close($ch); exit; } // 4. 释放curl句柄 curl_close($ch); // 5. 返回页面内容 return $output; }curl_get($url); 执行一下代码看看是否返回了自己想要的页面或者数据。","link":"/2019/03/28/PHP CURL模拟登陆/"},{"title":"关于Linux下报错：phpize command not found","text":"如果已经执行命令(Ubuntu)：apt-get php7.2-dev，后执行phpize -v 报：phpize: command not found。 解决方法： 重启Linux后在执行phpize -v find / -name phpize 查看是否存在该文件，一般是在 /usr/bin下 使用(phpize 所在目录) /usr/bin/phpize -v 看是否成功","link":"/2019/03/12/关于Linux下报错：phpize-command-not-found/"},{"title":"数据结构之单链表","text":"链表介绍链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。 单链表及其操作链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。 （图片来自维基百科） 基本操作 末尾插入（insertNodeAtEnd） 根据索引插入（insertNodeByIndex） 根据索引删除（deleteNodeByIndex） 根据索引搜索节点（searchNodeByIndex） 实现单链表定义一个Node类123456789101112class Node{ public $data; public $next; public function __construct($data) { $this-&gt;data = $data; $this-&gt;next = null; }} 定义一个SingleList类12345678910// 头节点public $header;// 节点大小private $size = 0;public function __construct(){ // 初始化头结点 $this-&gt;header = new Node(null);} 末尾插入时间复杂度 O(n) 123456789public function insertNodeAtEnd(Node $node) { $current = $this-&gt;header; while ($current-&gt;next != null) { $current = $current-&gt;next; } $current-&gt;next = $node; return ++$this-&gt;size; } 来执行看一下效果 12345$list = new SingleList();$list-&gt;insertNodeAtEnd(new Node(1));$list-&gt;insertNodeAtEnd(new Node(5));$list-&gt;insertNodeAtEnd(new Node(45));$list-&gt;showNode(); 在终端执行（WIN10）1php SingleList.php 显示结果123index - 1 - 1index - 2 - 5index - 3 - 45 根据索引插入时间复杂度 O(n) 123456789101112131415161718public function insertNodeByIndex($index, Node $node){ if ($index &lt; 1 || $index &gt; ($this-&gt;size + 1)) { throw new Exception(printf(&apos;你要插入的位置，超过了链表的长度 %d&apos;, $this-&gt;size)); } $current = $this-&gt;header; $tempIndex = 1; do { if ($index == $tempIndex ++) { $node-&gt;next = $current-&gt;next; $current-&gt;next = $node; break; } } while ($current-&gt;next != null &amp;&amp; ($current = $current-&gt;next)); return ++$this-&gt;size;} 执行看一下效果 123$list-&gt;insertNodeByIndex(3, new Node(15));echo &apos;------------------&apos; . PHP_EOL;$list-&gt;showNode(); 12345678index - 1 - 1index - 2 - 5index - 3 - 45------------------index - 1 - 1index - 2 - 5index - 3 - 15index - 4 - 45 根据索引删除时间复杂度 O(n) 1234567891011121314public function deleteNodeByIndex($index) { if ($index &lt; 1 || $index &gt; ($this-&gt;size + 1)) { throw new Exception(&apos;你要删除的节点不存在&apos;); } $current = $this-&gt;header; $tempIndex = 1; do { if ($index == $tempIndex ++) { $current-&gt;next = $current-&gt;next-&gt;next; break; } } while ($current-&gt;next != null &amp;&amp; ($current = $current-&gt;next)); return --$this-&gt;size;} 执行看一下结果 123echo &apos;------------------&apos; . PHP_EOL;$list-&gt;deleteNodeByIndex(4);$list-&gt;showNode(); 123456789101112index - 1 - 1index - 2 - 5index - 3 - 45------------------index - 1 - 1index - 2 - 5index - 3 - 15index - 4 - 45------------------index - 1 - 1index - 2 - 5index - 3 - 15 根据索引搜索节点时间复杂度 O(n) 12345678910111213141516public function searchNodeByIndex($index) { if ($index &lt; 1 || $index &gt; ($this-&gt;size + 1)) { throw new Exception(&apos;你要查询的节点不存在&apos;); } $current = $this-&gt;header; $tempIndex = 1; do { if ($index == $tempIndex ++) { echo var_export($current-&gt;next-&gt;data); echo PHP_EOL; break; } } while ($current-&gt;next != null &amp;&amp; ($current = $current-&gt;next));} 执行看一下结果 1$list-&gt;searchNodeByIndex(2); 15","link":"/2019/02/25/数据结构之单链表/"},{"title":"经常使用的网址-持续更新","text":"https://github.com/ 经典算法：https://www.yuque.com/logaa/vhl1b6 有哪些鲜为人知，确很有意思的网站：https://github.com/guanguans/notes/blob/master/Useful-website.md 软考：https://www.shangxueba.com/ laravel社区：https://learnku.com/laravel segmentfault社区：https://segmentfault.com/ 中国色：http://zhongguose.com/ 知乎：https://www.zhihu.com 上学吧：https://www.shangxueba.com/ 慕课网：https://www.imooc.com/ 免费图床（不需要登录即可使用）：https://sm.ms/ 跬步客：https://www.kuibuke.com/ web开发者知识体系：https://www.kancloud.cn/martist/ma_zhao_liu/370443","link":"/2019/03/28/经常使用的网址-持续更新/"}],"tags":[{"name":"php","slug":"php","link":"/tags/php/"},{"name":"phpize","slug":"phpize","link":"/tags/phpize/"},{"name":"链表","slug":"链表","link":"/tags/链表/"}],"categories":[{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"数据结构","slug":"数据结构","link":"/categories/数据结构/"}]}