{"pages":[],"posts":[{"title":"数据结构之单链表","text":"链表介绍链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。 单链表及其操作链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。 （图片来自维基百科） 基本操作 末尾插入（insertNodeAtEnd） 根据索引插入（insertNodeByIndex） 根据索引删除（deleteNodeByIndex） 根据索引搜索节点（searchNodeByIndex） 实现单链表定义一个Node类123456789101112class Node{ public $data; public $next; public function __construct($data) { $this-&gt;data = $data; $this-&gt;next = null; }} 定义一个SingleList类12345678910// 头节点public $header;// 节点大小private $size = 0;public function __construct(){ // 初始化头结点 $this-&gt;header = new Node(null);} 末尾插入时间复杂度 O(n) 123456789public function insertNodeAtEnd(Node $node) { $current = $this-&gt;header; while ($current-&gt;next != null) { $current = $current-&gt;next; } $current-&gt;next = $node; return ++$this-&gt;size; } 来执行看一下效果 12345$list = new SingleList();$list-&gt;insertNodeAtEnd(new Node(1));$list-&gt;insertNodeAtEnd(new Node(5));$list-&gt;insertNodeAtEnd(new Node(45));$list-&gt;showNode(); 在终端执行（WIN10）1php SingleList.php 显示结果123index - 1 - 1index - 2 - 5index - 3 - 45 根据索引插入时间复杂度 O(n) 123456789101112131415161718public function insertNodeByIndex($index, Node $node){ if ($index &lt; 1 || $index &gt; ($this-&gt;size + 1)) { throw new Exception(printf(&apos;你要插入的位置，超过了链表的长度 %d&apos;, $this-&gt;size)); } $current = $this-&gt;header; $tempIndex = 1; do { if ($index == $tempIndex ++) { $node-&gt;next = $current-&gt;next; $current-&gt;next = $node; break; } } while ($current-&gt;next != null &amp;&amp; ($current = $current-&gt;next)); return ++$this-&gt;size;} 执行看一下效果 123$list-&gt;insertNodeByIndex(3, new Node(15));echo &apos;------------------&apos; . PHP_EOL;$list-&gt;showNode(); 12345678index - 1 - 1index - 2 - 5index - 3 - 45------------------index - 1 - 1index - 2 - 5index - 3 - 15index - 4 - 45 根据索引删除时间复杂度 O(n) 1234567891011121314public function deleteNodeByIndex($index) { if ($index &lt; 1 || $index &gt; ($this-&gt;size + 1)) { throw new Exception(&apos;你要删除的节点不存在&apos;); } $current = $this-&gt;header; $tempIndex = 1; do { if ($index == $tempIndex ++) { $current-&gt;next = $current-&gt;next-&gt;next; break; } } while ($current-&gt;next != null &amp;&amp; ($current = $current-&gt;next)); return --$this-&gt;size;} 执行看一下结果 123echo &apos;------------------&apos; . PHP_EOL;$list-&gt;deleteNodeByIndex(4);$list-&gt;showNode(); 123456789101112index - 1 - 1index - 2 - 5index - 3 - 45------------------index - 1 - 1index - 2 - 5index - 3 - 15index - 4 - 45------------------index - 1 - 1index - 2 - 5index - 3 - 15 根据索引搜索节点时间复杂度 O(n) 12345678910111213141516public function searchNodeByIndex($index) { if ($index &lt; 1 || $index &gt; ($this-&gt;size + 1)) { throw new Exception(&apos;你要查询的节点不存在&apos;); } $current = $this-&gt;header; $tempIndex = 1; do { if ($index == $tempIndex ++) { echo var_export($current-&gt;next-&gt;data); echo PHP_EOL; break; } } while ($current-&gt;next != null &amp;&amp; ($current = $current-&gt;next));} 执行看一下结果 1$list-&gt;searchNodeByIndex(2); 15","link":"/2019/02/25/数据结构之单链表/"}],"tags":[],"categories":[]}